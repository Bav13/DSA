#include <iostream>
#include <vector>

using namespace std;

class HashTable {
private:
    vector<pair<int, int>> *table;
    int size;

    int hashFunction(int key) {
        return key % size;
    }

public:
    HashTable(int tableSize) {
        size = tableSize;
        table = new vector<pair<int, int>>[size];
    }

    void insert(int key, int value) {
        int index = hashFunction(key);
        for (auto &pair : table[index]) {
            if (pair.first == key) {
                pair.second = value;
                return;
            }
        }
        table[index].push_back({key, value});
    }

    int get(int key) {
        int index = hashFunction(key);
        for (auto &pair : table[index]) {
            if (pair.first == key) {
                return pair.second;
            }
        }
        return -1; // Return -1 if key not found
    }

    void remove(int key) {
        int index = hashFunction(key);
        for (auto it = table[index].begin(); it != table[index].end(); ++it) {
            if (it->first == key) {
                table[index].erase(it);
                return;
            }
        }
    }

    ~HashTable() {
        delete[] table;
    }
};

int main() {
    HashTable hashTable(10);

    hashTable.insert(5, 10);
    hashTable.insert(15, 20);
    hashTable.insert(25, 30);

    cout << "Value at key 5: " << hashTable.get(5) << endl;  // Output: 10
    cout << "Value at key 15: " << hashTable.get(15) << endl;  // Output: 20

    hashTable.remove(15);
    cout << "Value at key 15 after removal: " << hashTable.get(15) << endl;  // Output: -1

    return 0;
}
